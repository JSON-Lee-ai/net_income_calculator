from collections import List
from utils import StaticTuple

struct TaxCalculator:
    fn __init__(inout self, tax_brackets: List[StaticTuple[Float16, Float16, Float16]]) -> None:
        self.tax_brackets = tax_brackets

    @staticmethod
    fn calculate_net_income_with_bracket(gross_income: Float16, tax_brackets: List[StaticTuple[Float16, Float16, Float16]]) -> Float16:
        total_tax = 0.0 
        remaining_income = gross_income

        for bracket in tax_brackets:
            bracket_min, bracket_max, tax_rate = bracket
            if remaining_income <= 0:
                break

            income_in_bracket = min(bracket_max - bracket_min, remaining_income)
            tax_in_bracket = income_in_bracket * tax_rate
            total_tax += tax_in_bracket
            remaining_income -= income_in_bracket

        net_income = gross_income - total_tax
        return net_income

    fn calculate_net_income(self, gross_income: Float16) -> Float16:
        return self.calculate_net_income_with_bracket(gross_income, self.tax_brackets)